using System.Collections.Generic;
using System.Linq;

namespace ProjectEulerCS
{
  class Problem02
  { // Problem 2:
    // By considering the terms in the Fibonacci sequence whose values do not exceed
    // four million, find the sum of the even-valued terms.
    //
    // Each new term in the Fibonacci sequence is generated by adding the previous
    // two terms. By starting with 1 and 2, the first 10 terms will be:
    //
    // 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    // From http://www.mathblog.dk/project-euler-problem-2/:
    private static long getAnswer() {
      long fib1 = 1;
      long fib2 = 1;
      long result = 0;
      long summed = 0;
      
      while (result < 4000000) {
        if ((result % 2) == 0) {
          summed += result; }
        
        result = fib1 + fib2;
        fib2 = fib1;
        fib1 = result; }

      return summed; // 4613732.
    }

    // My attempt. Translation from VB, which was a translation of my F# attempt.
    // Those two solutions both got the correct answer.
    private static Dictionary<int, int> m;

    // This should be a functional internal to fib, but it's too complex for C#.
    private static int f(int n) {
      switch (n) {
        case 1:
          return 1;
        case 2:
          return 2;
        default:
          return fib(n-1) + fib(n-2);
      }
    }

    private static int fib(int n) {
      int x = 0;

      if (!m.TryGetValue(n, out x)) {
        x = f(n);
        m.Add(n, x);
      }

      return x;
    }

    private static List<int> fibs(int limit) {
      List<int> ns = new List<int>();

      for(int n=1; n<int.MaxValue; n++) {
        int x = fib(n);

        if (x<limit)
          ns.Add(x);
        else
          break;
      }

      return ns;
    }

    private static bool isEven(int n) {
      return (n%2) == 0;}

    private static int getAnswer1() {
      m = new Dictionary<int, int>();
      return fibs(4000000).FindAll(isEven).Sum(); // 4613732.
    }

    public static string Answer {
      get { return getAnswer().ToString(); }
    }
  }
}

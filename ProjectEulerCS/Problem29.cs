using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;

namespace ProjectEulerCS {
  class Problem29 {
    // How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
    //
    // Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
    //
    //    2^2=4, 2^3=8, 2^4=16, 2^5=32
    //    3^2=9, 3^3=27, 3^4=81, 3^5=243
    //    4^2=16, 4^3=64, 4^4=256, 4^5=1024
    //    5^2=25, 5^3=125, 5^4=625, 5^5=3125
    //
    // If they are then placed in numerical order, with any repeats removed, we get the following sequence
    // of 15 distinct terms:
    //
    // 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
    //
    // How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?


    // From http://www.mathblog.dk/project-euler-29-distinct-terms-sequence-ab/:

    private static int getAnswer() {
      SortedSet<double> set = new SortedSet<double>();

      for (int a=2; a<=100; a++)
        for (int b=2; b<=100; b++)
          set.Add(Math.Pow((double)a,(double)b)); // Will only insert distinct results.

      return set.Count; // 9183.
    }


    // From http://theburningmonk.com/2010/09/project-euler-problem-29-solution/:

    private static List<Tuple<int, int>> getCombos(int a, int b) {
      return Enumerable.Range(2, a)
        .SelectMany(x => Enumerable.Range(2, b)
          .Select(y => new Tuple<int, int>(x, y))).ToList();
    }

    private static int getAnswer1() {
      return getCombos(100, 100).Select(t => BigInteger.Pow(t.Item1, t.Item2))
        .OrderBy(x => x).Distinct().Count(); // 9382? It works in F#.
    }

    public static int Answer {
      get { return getAnswer1(); }
    }
  }
}

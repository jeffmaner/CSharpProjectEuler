using System;

namespace ProjectEulerCS {
  class Problem45 {
    // After 40755, what is the next triangle number that is also pentagonal and hexagonal?
    // 
    // Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
    // Triangle       T(n)=n(n+1)/2       1, 3,  6, 10, 15, ...
    // Pentagonal     P(n)=n(3n−1)/2      1, 5, 12, 22, 35, ...
    // Hexagonal      H(n)=n(2n−1)        1, 6, 15, 28, 45, ...
    // 
    // It can be verified that T(285) = P(165) = H(143) = 40755.
    // 
    // Find the next triangle number that is also pentagonal and hexagonal.


    // I'll skip my two function sources. The first one runs forever. The second on uses unfold, which I
    // don't have available in LINQ. :(


    // Based on http://www.mathblog.dk/project-euler-45-next-triangle-pentagonal-hexagonal-number/:

    // Math Blog points out that all triangular numbers based on odd ns are hexagonal numbers. So if we
    // generate hexagonal numbers and check to see if they are pentagonal numbers, at some point we will
    // find the answer.

    /// <summary>
    /// Returns the nth Hexagonal number.
    /// </summary>
    private static long H(long n) {
      return n*(2*n-1);
    }

    private static bool isPentagonal(long n) {
      double t = (Math.Sqrt(1+24*n) + 1.0) / 6.0; // This is the inverse function of P().
      return t==(long)t; // Does the inverse of P() result in an integer?
    }

    private static long getAnswer() {
      long result = 0;
      int i = 143;

      while (true) {
        i+=2;          // This was my observation! Woo-hoo! Increment by two instead of one, because
        result = H(i); // we're looking for odd is basd on the observation above.

        if (isPentagonal(result))
          break;
      }

      return result; // 1533776805.
    }

    public static long Answer {
      get { return getAnswer(); }
    }
  }
}
